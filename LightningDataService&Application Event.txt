CarTile.cmp
<aura:component implements="flexipage:availableForAllPageTypes" access="global">
	<aura:attribute name="car" type="Car__c" access ="public"
                    default = "{'sObjectType' : 'Car__c',
                               'Name' : 'Manish',
                               'MyOwnField' : 'My Field Example',
                               'Picture__c' : '/resources/cars/luxury/ford_mustang.jpeg'}"/> 
    
    <aura:attribute name="selected" type= "Boolean" default = "false" access = "public" />
    
    <aura:registerEvent name = "onCarSelect" type ="c:CarSelect"/>
    
    <lightning:button variant="neutral" class = "{!v.selected ? 'selected tile' : 'tile'  }" onclick = "{!c.OnCarClick}">
        
    <div style = "{# 'background-image:url(' +v.car.Picture__c + ')'}" class = "innertile">
      <div class = "lower-third"    > </div>
        <h1 class= "slds-truncate">{!v.car.Contact_r.Name}</h1>
    </div> 
   </lightning:button> 
    
</aura:component>
-----------------------
CarTileController.js
({
	OnCarClick : function(component, event, helper) 
    {
		var car= component.get("v.car");
        var evt = component.getEvent("onCarSelect");
        evt.setParams({'carId' : car.Id});
        evt.fire();
        
        
        var appEvent= $A.get("e.c:CarSelectedApplicationEvent");
        if(appEvent)
        {
            appEvent.setParams({'car' : car });
            appEvent.fire();
        }
	}
})
---------------------------
CarTile.css
.THIS.tile{
    position:relative;
    display:inline-block;
    width:100%;
    height:220px;
    padding: 1px ;
}

.THIS .innertile {
    background-size: cover;
    background-position: center;
    background-repeat: no-repeat;
    width: 100%;
    height: 100%;    
}

.THIS .lower-third{
    position: absolute;
    bottom: 0;
    left : 0;
    right: 0;
    color : #FFFFFF;
    background-color:rgba(0,0, .4);
    padding: 6px 8px;
}

.THIS.selected
{
    border : 3px solid rgb(0,112,210);
}
-------------------------
CarDetail.cmp
<aura:component implements="flexipage:availableForAllPageTypes,flexipage:availableForRecordHome,force:hasRecordId" access="global">
    <aura:attribute  type="Car__c" name="car" access="public" 
                    default ="{ 
                              'Name' : 'My default Car',
                              'Contact__r' : {
                              					'Name' : 'Default Contact'
                              				  },
                              'Car_Type__r': {
                              					'Name' : 'Default Car Type'
                              				  },
                              'Build_Year__c' : 2000,
                              'Per_Day_Rent__c' : 100,
                              'Mileage__c': 10,
                              'Picture__c' : '/resource/cars/luxury/ford_mustang.jpeg'}"/>
    
    <aura:attribute name = "showCardAction"  type="Boolean" default = "false" access = "public" />

    <aura:handler name ="init" value = "{!this}" action ="{!c.doInit}"/>

   <lightning:card iconName="utility:setup_assistant_guide"> 
   
         <aura:set attribute ="title">
            <lightning:formattedText value = "{!v.car.Contact__r.Name + Car }" />
         </aura:set>
       
         <aura:set attribute ="actions">
         <aura:if isTrue = "{!v.showCardAction}">
               <lightning:button variant="neutral" label="Full Details"  onclick="{!c.onFullDetails }"/>
         </aura:if> 
        </aura:set> 
               
        <lightning:layout multipleRows = "true">
        	<lightning:layoutItem size ="12" largeDeviceSize ="6" flexibility="true">       
            	
                <div class="slds-p-horizontal--small">
                    <div class= "carproperty">
                    <span class ="label">Car Name: </span>
                        <lightning:formattedText value = "{!v.car.Name}" />
                    </div>
                    
                    <div class= "carproperty">
                    <span class ="label">Type: </span>
                        <lightning:formattedText value = "{!v.car.Car_Type__r.Name}" />
                    </div>
                    
                    <div class= "carproperty">
                    <span class ="label">Build Year: </span>
                        <lightning:formattedNumber value = "{!v.car.Build_Year__c}" />
                    </div>
                    
                    <div class= "carproperty">
                    <span class ="label">Per Day Rent: </span>
                        <lightning:formattedNumber value = "{!v.car.Per_Day_Rent__c}"
                                                 style = "currency" currencyCode="USD"/>
                    </div>
                    
                    <div class= "carproperty">
                    <span class ="label">Mileage: </span>
                        <lightning:formattedNumber value = "{!v.car.Mileage__c}" />
                    </div>
                    
                  </div>   
            </lightning:layoutItem>
            
            <lightning:layoutItem size ="12" largeDeviceSize ="6" flexibility="true"> 
                <div class = "imageview" style ="{! 'background-image:url(' + v.car.Picture__c + ')'}"/>
            </lightning:layoutItem>
                
        </lightning:layout>

	 </lightning:card>
</aura:component>
------------------------------
CarDetailController.js
({
	doInit : function(component, event, helper) 
    {
        var navEvt = $A.get("e.force:navigateToSObject");
        if(navEvt)
        {
            component.set("v.showCardAction",true);           
        }
        else
        {
            component.set("v.showCardAction",false);
        }		
	},
    
    onFullDetails : function(component, event, helper) 
    {
        var navEvt = $A.get("e.force:navigateToSObject");
        if(navEvt)
        {
            navEvt.setParams({ "recordId" :component.get("v.car").Id,
                              "slideDevName": "detail" }) ;
            
            console.log("Records are: " + component.get("v.car").Id);
            navEvt.fire();
        }
        else
        {
            console.log("Error");
        }
    }
})
----------------------------
CarDetail.css
.THIS .label 
{
    font-weight : bold;
    display: block
}

.THIS .carproperty 
{
    margin-bottom : jpx;
}

.THIS .imageview 
{
    background-repeat : no-repeat;
    background-size : contain;
    height : 200px;
    margin : 2px;
}
---------------------------
CarDetails.cmp
<aura:component implements="force:appHostable,flexipage:availableForAllPageTypes" >
	
    <aura:attribute type ="Car__c" name ="car" access ="public"/>
    <aura:attribute type="String" name="recordError" access="public"/>
    
    <aura:handler event="c:CarSelectedApplicationEvent" action="{!c.onCarSelected}"/>
    <aura:attribute name="Id" type= "Id" access="public"/>
    
    <force:recordData aura:id="service"
                      recordId="{!v.Id}"
                      mode="VIEW"
                      targetFields="{!v.car}"
                      targetError="{!v.recordError}"
                      recordUpdated="{!c.onRecordUpdated}"
                      fields="Id, Name, Available_for_Rent__c, Build_Year__c,  Description__c, Mileage__c, Per_Day_Rent__c, Picture__c,
                              Contact__r.Name, Car_Type__r.Name" />
     
     <lightning:layout multipleRows = "true">
        	<lightning:layoutItem size ="12" largeDeviceSize ="12" >         	
                  <aura:if isTrue="{! !empty(v.car)}" > 
                    <lightning:tabset aura:id="tabs">
                        
                        <lightning:tab label ="Details" id="cardetailtab">
                           <c:CarDetail car ="{!v.car}"/>
                        </lightning:tab>
                        
                        <lightning:tab label ="Add Experience" id="addcarexp">
                           <c:AddCarExp car ="{!v.car}" />
                        </lightning:tab>
                        
                   </lightning:tabset>
 				 </aura:if> 
             </lightning:layoutItem>
      </lightning:layout>               
</aura:component>

---------------------------
CarDetailsController.js
({
    
    onCarSelected :function(component, event, helper)
    {
        component.set("v.Id",event.getParam("car").Id);
        console.log('Selected car is: ' + event.getParam("car").Id);
        component.find("service").reloadRecord();
    },
    
    onRecordUpdated : function(component, event, helper)
    {
        console.log('Ans:' + component.get("v.car"));
	},
})
---------------------------
AddCarExp.cmp
<aura:component extends="c:Base" >
    
    <aura:attribute type ="Car__c" name ="car" access ="public"/>
    <aura:attribute type="Car_Experience__c" name="carExperience" access="public"/>
	<aura:attribute type="String" name="recordError" access="public"/>

    <aura:handler name="init" value="{!this}" action="{!c.doInit}" />
    
    <force:recordData aura:id="service"
                      mode="EDIT"
                      targetFields="{!v.carExperience}"
                      targetError="{!v.recordError}"
                      fields="Id, Name, Car__c, Experience__c" />
    
    <lightning:layout multipleRows="true">
        
        <lightning:layoutItem size="12" largeDeviceSize="12" padding ="around-small">
            <lightning:input name="title" label="Title" value="{!v.carExperience.Name}" />  
        </lightning:layoutItem>
       
        <lightning:layoutItem size="12" largeDeviceSize="12" padding ="around-small">
			<label class="slds-form-element__label" for="input-id-01">Description</label>
            <lightning:inputRichText value="{!v.carExperience.Experience__c}" />
        </lightning:layoutItem> 
        
         <lightning:layoutItem size="12" largeDeviceSize="12" padding ="around-small">
            <lightning:button  label="Add Experience" iconName ="utility:save" onclick="{!c.onSave}"/>  
        </lightning:layoutItem>
              
    </lightning:layout>    
                                    
</aura:component>
----------------------------
AddCarExpController.js
({
	doInit : function(component, event, helper) 
    {
		helper.onInit(component, event, helper);
	},
    
    onRecordUpdated: function(component, event, helper) 
    {
        //recordUpdated="{!c.onRecordUpdated}"
    },
    
     onSave:   function(component, event, helper)
    {
        component.set("v.carExperience.Car__c", component.get("v.car.Id"));
        component.find("service").saveRecord($A.getCallback(function(saveResult) {
            // use the recordUpdated event handler to handle generic logic when record is changed
            if (saveResult.state === "SUCCESS" || saveResult.state === "DRAFT") {
                // handle component related logic in event handler
                var resultsToast = $A.get("e.force:showToast");
                if (resultsToast)
                {
                    resultsToast.setParams({
                        "title" : "Saved",
                        "message" : "Car Experience added"
                    }) ;
                    resultsToast.fire();
                } 
                else
                {
                    alert ("Car experience added");
                }
               helper.onInit(component, event, helper);
            } else if (saveResult.state === "INCOMPLETE") 
            {
                console.log("User is offline, device doesn't support drafts.");
                helper.showToast (component,event,helper,{
                    "title" : " error!",
    					"type" : "error" ,                   
   						"message" : "Toast param not defined"            });
                
            } else if (saveResult.state === "ERROR") 
            {
                console.log('Problem saving record, error: ' + JSON.stringify(saveResult.error));
                helper.showToast (component,event,helper,{
                    "title" : " error!",
    					"type" : "error" ,                   
   						"message" : "Toast param not defined"            });
                
            } else {
                console.log('Unknown problem, state: ' + saveResult.state + ', error: ' + JSON.stringify(saveResult.error));
                helper.showToast (component,event,helper,{
                    "title" : " error!",
    					"type" : "error" ,                   
   						"message" : "Toast param not defined"            });
                
            }
        }));
    },
})
-------------------------------------
AddCarExpHelper.js
({
    
    onInit : function(component, event, helper)
    {
        // Prepare a new record from template
       component.find("service").getNewRecord(
            "Car_Experience__c", // sObject type (objectApiName)
            null,      // recordTypeId
            false,     // skip cache?
            $A.getCallback(function() {
                var rec = component.get("v.carExperience");
                var error = component.get("v.recordError");
                 var car = component.get("v.car");
                if(error || (rec === null)) 
                {
                    console.log("Error initializing record template: " + error);
                    
                }
                else 
                {
                    console.log("Record template initialized: " + car.Id); 
                    component.set("v.carExperience.Car__c",car.Id);
                }
            })
        );
    },

})


-----------------------------
BaseHelper.js
({
	callserver : function(component,method,callback,params) 
    {
		var action = component.get(method);
        if(params)
        {
            action.setParams(params);
        }
        action.setCallback(this,function(response)
                           {
                               var state = response.getState();
                               if(state === "SUCCESS")
                               {
                                   callback.call(this,response.getReturnValue());
                               }
                               else if (state === "ERROR")
                               {
                                   var error = response.getError();
                                   if (error)
                                   {
                                       console.log("Errors:",errors);
                                       if (errors[0] && errors[0].message)
                                       {
                                           throw new Error ("Error:" +errors[0].message);
                                       }
                                   }
                               }
                               else
                               {
                                   throw new Error ("Unknown Error");
                               }
                           });
        $A.enqueueAction(action);
	},
    
    showToast : function (component,event,heler,params)
    {
    	var toastEvent = $A.get("e.force:showToast");
    	if (toastEvent)
   		 {
    	if (!params)
    	{
    	toastEvent.setParams({
                        "title" : "Toast error!",
    					"type" : "error" ,                   
   						"message" : "Toast param not defined."
                  		  }) ;
        toastEvent.fire();
		}
        else
        {
          toastEvent.setParams(params);  
          toastEvent.fire();
        }
	}
    else
    {
        alert(params.message);
    }
}
    
})
-----------------------
CarSelectedApplicationEvent.evt
<aura:event type="APPLICATION" description="Pass carID hen ever car is selected." >
    <aura:attribute type="Car__c" name ="car"/>
</aura:event>